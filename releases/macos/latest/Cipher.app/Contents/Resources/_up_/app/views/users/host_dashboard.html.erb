<% content_for :title, "Host Dashboard - Cipher" %>

<div class="host-dashboard">
  <div class="dashboard-header">
    <h1>üè† Storage Host Dashboard</h1>
    <p class="dashboard-subtitle">Earn CPH tokens by providing storage to the Cipher network</p>
  </div>

  <!-- Wallet Connection Required -->
  <div id="wallet-required-notice" class="alert alert-warning" style="display: none;">
    <strong>Wallet Required:</strong> Please connect your wallet to use hosting features.
    <button id="connect-for-hosting" class="btn btn-sm btn-primary">Connect Wallet</button>
  </div>

  <!-- Host Registration Section -->
  <div id="host-registration" class="card" style="display: none;">
    <div class="card-header">
      <h2>Become a Storage Host</h2>
    </div>
    <div class="card-body">
      <p>Join the Cipher network as a storage provider and earn CPH tokens for storing encrypted files.</p>
      
      <div class="registration-requirements">
        <h3>Requirements:</h3>
        <ul>
          <li>‚úÖ Minimum 1,000 CPH stake required</li>
          <li>üîó Wallet connected</li>
          <li>üíæ Available storage space</li>
          <li>‚ö° Stable internet connection recommended</li>
        </ul>
      </div>

      <div class="registration-form">
        <div class="form-group">
          <label for="storage-capacity">Storage Capacity (GB):</label>
          <input type="number" id="storage-capacity" min="1" max="1000" value="10" class="form-input">
          <small class="form-help">How much storage space can you dedicate to the network?</small>
        </div>

        <div class="form-group">
          <label>Current Balance:</label>
          <div id="current-balance" class="balance-display">0 CPH</div>
        </div>

        <div class="form-actions">
          <button id="register-host-btn" class="btn btn-primary" disabled>
            Stake 1,000 CPH & Become Host
          </button>
          <button id="check-balance-btn" class="btn btn-outline">Refresh Balance</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Host Management Section -->
  <div id="host-management" class="card" style="display: none;">
    <div class="card-header">
      <h2>Host Management</h2>
      <div class="host-status">
        <span id="host-status-badge" class="status-badge status-active">Active</span>
      </div>
    </div>
    <div class="card-body">
      
      <!-- Host Statistics -->
      <div class="host-stats-grid">
        <div class="stat-card">
          <div class="stat-label">Staked Amount</div>
          <div id="staked-amount" class="stat-value">1,000 CPH</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-label">Storage Used</div>
          <div id="storage-used" class="stat-value">0 / 10 GB</div>
          <div class="stat-progress">
            <div id="storage-progress" class="progress-bar">
              <div class="progress-fill" style="width: 0%"></div>
            </div>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-label">Total Earnings</div>
          <div id="total-earnings" class="stat-value">0 CPH</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-label">Reliability Score</div>
          <div id="reliability-score" class="stat-value">100%</div>
        </div>
      </div>

      <!-- Recent Activity -->
      <div class="host-activity">
        <h3>Recent Activity</h3>
        <div id="host-activity-list" class="activity-list">
          <div class="activity-item">
            <div class="activity-icon">üíæ</div>
            <div class="activity-content">
              <div class="activity-title">No activity yet</div>
              <div class="activity-time">Start hosting to see activity here</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Host Actions -->
      <div class="host-actions">
        <button id="claim-rewards-btn" class="btn btn-secondary" disabled>
          Claim Rewards (0 CPH)
        </button>
        <button id="update-capacity-btn" class="btn btn-outline">
          Update Capacity
        </button>
        <button id="unregister-host-btn" class="btn btn-danger-outline">
          Stop Hosting
        </button>
      </div>
    </div>
  </div>

  <!-- Network Statistics -->
  <div class="card">
    <div class="card-header">
      <h2>üåê Network Statistics</h2>
    </div>
    <div class="card-body">
      <div class="network-stats-grid">
        <div class="stat-card">
          <div class="stat-label">Active Hosts</div>
          <div id="network-hosts" class="stat-value">0</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-label">Files Stored</div>
          <div id="network-files" class="stat-value">0</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-label">Total Storage</div>
          <div id="network-storage" class="stat-value">0 GB</div>
        </div>
        
        <div class="stat-card">
          <div class="stat-label">Network Usage</div>
          <div id="network-usage" class="stat-value">0%</div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
.host-dashboard {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.dashboard-header {
  text-align: center;
  margin-bottom: 30px;
}

.dashboard-header h1 {
  font-size: 2.5rem;
  margin-bottom: 10px;
  color: var(--primary-color, #3b82f6);
}

.dashboard-subtitle {
  font-size: 1.2rem;
  color: var(--text-secondary, #6b7280);
  margin-bottom: 0;
}

.card {
  background: white;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  margin-bottom: 30px;
  overflow: hidden;
}

.card-header {
  background: var(--bg-secondary, #f8f9fa);
  padding: 20px;
  border-bottom: 1px solid var(--border-color, #e5e7eb);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.card-header h2 {
  margin: 0;
  font-size: 1.5rem;
}

.card-body {
  padding: 30px;
}

.host-stats-grid,
.network-stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.stat-card {
  background: var(--bg-secondary, #f8f9fa);
  border-radius: 8px;
  padding: 20px;
  text-align: center;
}

.stat-label {
  font-size: 0.875rem;
  color: var(--text-secondary, #6b7280);
  margin-bottom: 8px;
  font-weight: 500;
}

.stat-value {
  font-size: 1.5rem;
  font-weight: bold;
  color: var(--text-primary, #1f2937);
}

.stat-progress {
  margin-top: 10px;
}

.progress-bar {
  background: var(--bg-tertiary, #e5e7eb);
  border-radius: 4px;
  height: 8px;
  overflow: hidden;
}

.progress-fill {
  background: var(--success-color, #10b981);
  height: 100%;
  transition: width 0.3s ease;
}

.status-badge {
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 0.875rem;
  font-weight: 500;
}

.status-active {
  background: var(--success-light, #d1fae5);
  color: var(--success-color, #10b981);
}

.registration-requirements ul {
  list-style: none;
  padding: 0;
}

.registration-requirements li {
  padding: 8px 0;
  font-size: 1rem;
}

.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: 500;
}

.form-input {
  width: 100%;
  max-width: 300px;
  padding: 10px;
  border: 1px solid var(--border-color, #d1d5db);
  border-radius: 6px;
  font-size: 1rem;
}

.form-help {
  display: block;
  margin-top: 5px;
  font-size: 0.875rem;
  color: var(--text-secondary, #6b7280);
}

.balance-display {
  font-size: 1.25rem;
  font-weight: bold;
  color: var(--primary-color, #3b82f6);
  padding: 10px;
  background: var(--bg-secondary, #f8f9fa);
  border-radius: 6px;
  display: inline-block;
  min-width: 120px;
}

.form-actions,
.host-actions {
  display: flex;
  gap: 15px;
  flex-wrap: wrap;
}

.btn {
  padding: 10px 20px;
  border-radius: 6px;
  font-weight: 500;
  text-decoration: none;
  border: none;
  cursor: pointer;
  transition: all 0.2s;
  display: inline-flex;
  align-items: center;
  gap: 8px;
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.btn-primary {
  background: var(--primary-color, #3b82f6);
  color: white;
}

.btn-primary:hover:not(:disabled) {
  background: var(--primary-dark, #2563eb);
}

.btn-secondary {
  background: var(--secondary-color, #6b7280);
  color: white;
}

.btn-outline {
  background: transparent;
  color: var(--primary-color, #3b82f6);
  border: 1px solid var(--primary-color, #3b82f6);
}

.btn-danger-outline {
  background: transparent;
  color: var(--danger-color, #ef4444);
  border: 1px solid var(--danger-color, #ef4444);
}

.activity-list {
  max-height: 300px;
  overflow-y: auto;
}

.activity-item {
  display: flex;
  gap: 15px;
  padding: 15px;
  border-bottom: 1px solid var(--border-color, #e5e7eb);
}

.activity-item:last-child {
  border-bottom: none;
}

.activity-icon {
  font-size: 1.5rem;
  width: 40px;
  text-align: center;
}

.activity-content {
  flex: 1;
}

.activity-title {
  font-weight: 500;
  margin-bottom: 5px;
}

.activity-time {
  font-size: 0.875rem;
  color: var(--text-secondary, #6b7280);
}

.alert {
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.alert-warning {
  background: var(--warning-light, #fef3c7);
  color: var(--warning-dark, #92400e);
  border: 1px solid var(--warning-color, #f59e0b);
}

@media (max-width: 768px) {
  .host-stats-grid,
  .network-stats-grid {
    grid-template-columns: 1fr;
  }
  
  .form-actions,
  .host-actions {
    flex-direction: column;
  }
  
  .btn {
    justify-content: center;
  }
}
</style>

<script type="module">
import CipherToken from 'cipher_token';

class HostDashboard {
  constructor() {
    this.token = null;
    this.isHost = false;
    this.hostInfo = null;
    
    this.setupElements();
    this.setupEventListeners();
    this.checkWalletConnection();
  }
  
  setupElements() {
    this.elements = {
      walletNotice: document.getElementById('wallet-required-notice'),
      hostRegistration: document.getElementById('host-registration'),
      hostManagement: document.getElementById('host-management'),
      connectBtn: document.getElementById('connect-for-hosting'),
      registerBtn: document.getElementById('register-host-btn'),
      checkBalanceBtn: document.getElementById('check-balance-btn'),
      claimRewardsBtn: document.getElementById('claim-rewards-btn'),
      unregisterBtn: document.getElementById('unregister-host-btn'),
      storageCapacityInput: document.getElementById('storage-capacity'),
      currentBalance: document.getElementById('current-balance'),
      stakedAmount: document.getElementById('staked-amount'),
      storageUsed: document.getElementById('storage-used'),
      storageProgress: document.getElementById('storage-progress'),
      totalEarnings: document.getElementById('total-earnings'),
      reliabilityScore: document.getElementById('reliability-score'),
      activityList: document.getElementById('host-activity-list'),
      networkHosts: document.getElementById('network-hosts'),
      networkFiles: document.getElementById('network-files'),
      networkStorage: document.getElementById('network-storage'),
      networkUsage: document.getElementById('network-usage')
    };
  }
  
  setupEventListeners() {
    this.elements.connectBtn?.addEventListener('click', () => this.connectWallet());
    this.elements.registerBtn?.addEventListener('click', () => this.registerAsHost());
    this.elements.checkBalanceBtn?.addEventListener('click', () => this.updateBalance());
    this.elements.claimRewardsBtn?.addEventListener('click', () => this.claimRewards());
    this.elements.unregisterBtn?.addEventListener('click', () => this.unregisterHost());
  }
  
  async checkWalletConnection() {
    if (window.cipherWallet?.isConnected) {
      this.token = window.cipherWallet.token;
      await this.initializeDashboard();
    } else {
      this.showWalletRequired();
    }
    
    // Listen for wallet connection changes
    const checkConnection = setInterval(() => {
      if (window.cipherWallet?.isConnected && !this.token) {
        this.token = window.cipherWallet.token;
        this.initializeDashboard();
        clearInterval(checkConnection);
      }
    }, 1000);
  }
  
  async connectWallet() {
    try {
      if (window.cipherWallet) {
        await window.cipherWallet.connectWallet();
        this.token = window.cipherWallet.token;
        await this.initializeDashboard();
      }
    } catch (error) {
      console.error('Failed to connect wallet:', error);
      alert('Failed to connect wallet: ' + error.message);
    }
  }
  
  async initializeDashboard() {
    this.hideWalletRequired();
    await this.checkHostStatus();
    await this.updateBalance();
    await this.loadNetworkStats();
    
    // Set up real-time updates
    this.startPeriodicUpdates();
  }
  
  showWalletRequired() {
    this.elements.walletNotice.style.display = 'flex';
    this.elements.hostRegistration.style.display = 'none';
    this.elements.hostManagement.style.display = 'none';
  }
  
  hideWalletRequired() {
    this.elements.walletNotice.style.display = 'none';
  }
  
  async checkHostStatus() {
    try {
      if (!this.token) return;
      
      this.hostInfo = await this.token.getHostInfo();
      
      if (this.hostInfo && this.hostInfo.isActive) {
        this.isHost = true;
        this.showHostManagement();
        this.updateHostStats();
      } else {
        this.isHost = false;
        this.showHostRegistration();
      }
    } catch (error) {
      console.error('Failed to check host status:', error);
      this.showHostRegistration(); // Default to registration view
    }
  }
  
  showHostRegistration() {
    this.elements.hostRegistration.style.display = 'block';
    this.elements.hostManagement.style.display = 'none';
  }
  
  showHostManagement() {
    this.elements.hostRegistration.style.display = 'none';
    this.elements.hostManagement.style.display = 'block';
  }
  
  async updateBalance() {
    try {
      if (!this.token) return;
      
      const balance = await this.token.getBalance();
      this.elements.currentBalance.textContent = `${balance} CPH`;
      
      // Enable/disable register button based on balance
      const hasEnoughBalance = parseFloat(balance) >= 1000;
      this.elements.registerBtn.disabled = !hasEnoughBalance;
      
      if (!hasEnoughBalance) {
        this.elements.registerBtn.textContent = `Need ${1000 - parseFloat(balance)} more CPH`;
      } else {
        this.elements.registerBtn.textContent = 'Stake 1,000 CPH & Become Host';
      }
    } catch (error) {
      console.error('Failed to update balance:', error);
    }
  }
  
  async registerAsHost() {
    try {
      const capacity = parseInt(this.elements.storageCapacityInput.value);
      
      if (!capacity || capacity < 1) {
        alert('Please enter a valid storage capacity');
        return;
      }
      
      this.elements.registerBtn.disabled = true;
      this.elements.registerBtn.textContent = 'Registering...';
      
      // Convert GB to KB for the contract
      const capacityKB = capacity * 1024 * 1024;
      
      const txReceipt = await this.token.registerAsHost(capacityKB);
      
      alert('Successfully registered as host! Transaction: ' + txReceipt.transactionHash);
      
      // Refresh the dashboard
      await this.checkHostStatus();
      
    } catch (error) {
      console.error('Host registration failed:', error);
      alert('Registration failed: ' + error.message);
      
      this.elements.registerBtn.disabled = false;
      this.elements.registerBtn.textContent = 'Stake 1,000 CPH & Become Host';
    }
  }
  
  async claimRewards() {
    try {
      this.elements.claimRewardsBtn.disabled = true;
      this.elements.claimRewardsBtn.textContent = 'Claiming...';
      
      const txReceipt = await this.token.claimHostRewards();
      
      alert('Rewards claimed! Transaction: ' + txReceipt.transactionHash);
      
      // Refresh stats
      await this.checkHostStatus();
      await this.updateBalance();
      
    } catch (error) {
      console.error('Failed to claim rewards:', error);
      alert('Failed to claim rewards: ' + error.message);
      
      this.elements.claimRewardsBtn.disabled = false;
      this.elements.claimRewardsBtn.textContent = 'Claim Rewards';
    }
  }
  
  async unregisterHost() {
    const confirmed = confirm('Are you sure you want to stop hosting? Your stake will be returned.');
    if (!confirmed) return;
    
    try {
      this.elements.unregisterBtn.disabled = true;
      this.elements.unregisterBtn.textContent = 'Unregistering...';
      
      const txReceipt = await this.token.unregisterAsHost();
      
      alert('Successfully unregistered as host! Your stake has been returned. Transaction: ' + txReceipt.transactionHash);
      
      // Refresh the dashboard
      await this.checkHostStatus();
      await this.updateBalance();
      
    } catch (error) {
      console.error('Failed to unregister:', error);
      alert('Failed to unregister: ' + error.message);
      
      this.elements.unregisterBtn.disabled = false;
      this.elements.unregisterBtn.textContent = 'Stop Hosting';
    }
  }
  
  updateHostStats() {
    if (!this.hostInfo) return;
    
    this.elements.stakedAmount.textContent = `${this.hostInfo.stakedAmount} CPH`;
    
    const capacityGB = Math.round(parseInt(this.hostInfo.storageCapacityKB) / (1024 * 1024));
    const usedGB = Math.round(parseInt(this.hostInfo.usedStorageKB) / (1024 * 1024));
    this.elements.storageUsed.textContent = `${usedGB} / ${capacityGB} GB`;
    
    const usagePercent = capacityGB > 0 ? (usedGB / capacityGB) * 100 : 0;
    this.elements.storageProgress.querySelector('.progress-fill').style.width = `${usagePercent}%`;
    
    this.elements.totalEarnings.textContent = `${this.hostInfo.totalEarnings} CPH`;
    this.elements.reliabilityScore.textContent = `${this.hostInfo.reliabilityScore}%`;
    
    // Update claim rewards button
    const earnings = parseFloat(this.hostInfo.totalEarnings);
    this.elements.claimRewardsBtn.disabled = earnings === 0;
    this.elements.claimRewardsBtn.textContent = `Claim Rewards (${this.hostInfo.totalEarnings} CPH)`;
  }
  
  async loadNetworkStats() {
    try {
      const stats = await this.token.getNetworkStats();
      if (stats) {
        this.elements.networkHosts.textContent = stats.activeHosts || '0';
      }
      
      // Load additional stats from API
      const response = await fetch('/api/v1/blockchain/network_stats');
      if (response.ok) {
        const networkStats = await response.json();
        this.elements.networkFiles.textContent = networkStats.total_files_stored || '0';
        this.elements.networkStorage.textContent = Math.round(networkStats.total_storage_kb / (1024 * 1024)) + ' GB';
        this.elements.networkUsage.textContent = networkStats.network_utilization + '%';
      }
    } catch (error) {
      console.error('Failed to load network stats:', error);
    }
  }
  
  startPeriodicUpdates() {
    // Update every 30 seconds
    setInterval(() => {
      if (this.isHost) {
        this.checkHostStatus();
      }
      this.loadNetworkStats();
    }, 30000);
  }
}

// Initialize the dashboard
document.addEventListener('DOMContentLoaded', () => {
  new HostDashboard();
});
</script>