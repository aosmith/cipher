<div class="container">
  <div class="page-header">
    <h1>üîì Restore Your Identity</h1>
    <p>Sign in to your existing Cipher account</p>
  </div>

  <div class="form-container">
    <div class="form-section">
      <% if flash[:alert] %>
        <div class="error-messages">
          <p><%= flash[:alert] %></p>
        </div>
      <% end %>

      <form id="restore-form" class="import-form">
        <div class="restore-info">
          <h3>üîÑ Sign In to Your Cipher Account</h3>
          <p>Enter your username and master password to restore your identity.</p>
          
          <div class="info-note">
            <strong>üîë Zero-Knowledge Login:</strong>
            Your keys are recreated from your credentials - no files needed!
          </div>
        </div>

        <div class="form-group">
          <%= label_tag :restore_username, "Username", class: "form-label" %>
          <%= text_field_tag :restore_username, "", class: "form-control", 
                             placeholder: "Enter your username",
                             required: true,
                             id: "restore-username" %>
          <small class="form-help">Your unique Cipher username</small>
        </div>

        <div class="form-group">
          <%= label_tag :restore_password, "Master Password", class: "form-label" %>
          <%= password_field_tag :restore_password, "", class: "form-control", 
                                 placeholder: "Enter your master password",
                                 required: true,
                                 id: "restore-password" %>
          <small class="form-help">The password you used when creating your account</small>
        </div>

        <div id="restore-progress" style="display: none;">
          <div class="restore-status">
            <p><strong>üîê Restoring Identity...</strong></p>
            <div class="progress-bar">
              <div id="restore-progress-bar" class="progress-fill"></div>
            </div>
            <p id="restore-status">Deriving keys from credentials...</p>
          </div>
        </div>

        <div class="form-actions">
          <button type="submit" class="btn btn-primary btn-large" id="restore-btn">üîì Restore & Sign In</button>
        </div>
      </form>
    </div>

    <div class="info-section">
      <h3>How Identity Restoration Works</h3>
      <ol>
        <li><strong>Key Derivation:</strong> Your private key is recreated from username + password</li>
        <li><strong>Verification:</strong> The generated public key is checked against your account</li>
        <li><strong>Authentication:</strong> If keys match, you're logged in automatically</li>
        <li><strong>Local Storage:</strong> Your keys are stored encrypted in your browser</li>
      </ol>

      <div class="security-note">
        <h4>üõ°Ô∏è Zero-Knowledge Benefits</h4>
        <ul>
          <li><strong>No Files:</strong> No backup files to lose or manage</li>
          <li><strong>Portable:</strong> Access your identity from any Cipher instance</li>
          <li><strong>Secure:</strong> Private keys never leave your device</li>
          <li><strong>Deterministic:</strong> Same credentials always recreate the same identity</li>
        </ul>
      </div>

      <div class="help-section">
        <h4>‚ùì Troubleshooting</h4>
        <p>If restoration fails:</p>
        <ul>
          <li>Double-check your username spelling</li>
          <li>Verify your password is exactly as you created it</li>
          <li>Make sure your account exists on this Cipher instance</li>
          <li>Contact support if you're certain your credentials are correct</li>
        </ul>
      </div>
    </div>
  </div>
</div>

<style>
.restore-info {
  background: rgba(255, 243, 231, 0.9);
  backdrop-filter: blur(10px);
  padding: 20px;
  border-radius: 12px;
  margin-bottom: 20px;
}

.restore-info h3 {
  margin-top: 0;
  color: #9f4e00;
}

.info-note {
  background: rgba(102, 126, 234, 0.1);
  border: 1px solid rgba(102, 126, 234, 0.3);
  color: #667eea;
  padding: 15px;
  border-radius: 8px;
  margin-top: 15px;
  font-weight: 500;
}

.info-note strong {
  color: #4c51bf;
}

.restore-status {
  text-align: center;
  padding: 20px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  margin-top: 15px;
}

.progress-bar {
  width: 100%;
  height: 24px;
  background: #e0e0e0;
  border-radius: 12px;
  overflow: hidden;
  margin: 15px 0;
}

.progress-fill {
  height: 100%;
  background: linear-gradient(90deg, #667eea, #764ba2);
  border-radius: 12px;
  transition: width 0.5s ease;
  width: 0%;
}

#restore-status {
  color: #2d3748;
  font-weight: 500;
  margin: 10px 0 0 0;
}

.security-note {
  background: rgba(231, 255, 231, 0.9);
  padding: 15px;
  border-radius: 8px;
  margin: 15px 0;
}

.security-note h4 {
  margin-top: 0;
  color: #155724;
}

.help-section {
  background: rgba(255, 247, 231, 0.9);
  padding: 15px;
  border-radius: 8px;
  margin-top: 15px;
}

.help-section h4 {
  margin-top: 0;
  color: #856404;
}

.info-section h4 {
  color: #2d3748;
  margin: 15px 0 8px 0;
  font-weight: 600;
}

.info-section ul, .info-section ol {
  color: #4a5568;
  margin-bottom: 15px;
}

.info-section code {
  background: rgba(0, 0, 0, 0.1);
  padding: 2px 6px;
  border-radius: 4px;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
}
</style>

<script type="module">
import CipherCrypto from 'crypto_utils';

document.addEventListener('DOMContentLoaded', function() {
  const restoreForm = document.getElementById('restore-form');
  const restoreBtn = document.getElementById('restore-btn');
  const restoreProgress = document.getElementById('restore-progress');
  const restoreProgressBar = document.getElementById('restore-progress-bar');
  const restoreStatus = document.getElementById('restore-status');
  const usernameField = document.getElementById('restore-username');
  const passwordField = document.getElementById('restore-password');
  
  const crypto = new CipherCrypto();
  
  restoreForm.addEventListener('submit', async function(event) {
    event.preventDefault();
    
    const username = usernameField.value.trim();
    const password = passwordField.value;
    
    if (!username || !password) {
      alert('Please enter both username and password');
      return;
    }
    
    try {
      restoreProgress.style.display = 'block';
      restoreBtn.disabled = true;
      
      // Step 1: Derive keys from credentials
      restoreStatus.textContent = 'Deriving keys from credentials...';
      restoreProgressBar.style.width = '25%';
      await new Promise(resolve => setTimeout(resolve, 500));
      
      const keyPair = await crypto.createKeyPair(username, password);
      
      // Step 2: Verify with server
      restoreStatus.textContent = 'Verifying identity with server...';
      restoreProgressBar.style.width = '50%';
      await new Promise(resolve => setTimeout(resolve, 300));
      
      // Check if user exists and public key matches
      const response = await fetch('/api/v1/verify_identity', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
        },
        body: JSON.stringify({
          username: username,
          public_key: keyPair.publicKeyBase64
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        
        if (result.valid) {
          // Step 3: Store keys locally
          restoreStatus.textContent = 'Storing keys locally...';
          restoreProgressBar.style.width = '75%';
          
          await crypto.storePrivateKey(username, keyPair.privateKey, password);
          await new Promise(resolve => setTimeout(resolve, 300));
          
          // Step 4: Login
          restoreStatus.textContent = 'Logging in...';
          restoreProgressBar.style.width = '100%';
          
          // Set session by calling login endpoint
          const loginResponse = await fetch('/api/v1/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
            },
            body: JSON.stringify({
              username: username,
              public_key: keyPair.publicKeyBase64
            })
          });
          
          if (loginResponse.ok) {
            // Redirect to user profile
            window.location.href = `/users/${result.user_id}`;
          } else {
            throw new Error('Login failed');
          }
        } else {
          throw new Error('Invalid credentials - public key does not match');
        }
      } else {
        throw new Error('Server error during verification');
      }
    } catch (error) {
      console.error('Restore failed:', error);
      alert('Restore failed: ' + error.message);
      restoreProgress.style.display = 'none';
      restoreBtn.disabled = false;
    }
  });
});
</script>